import com.github.jk1.license.render.*

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.jk1.dependency-license-report'

repositories {
    if (project.hasProperty('local')) {
        mavenLocal()
    }
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven { url 'http://repository.activeeon.com/content/groups/proactive/'}
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
    }
    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.7'
    }
}

group = 'org.ow2.proactive'
version = version


configurations {
    localDeps
}

dependencies {
    localDeps "org.ow2.proactive_grid_cloud_portal:rest-smartproxy:$version"
    compile configurations.localDeps
    
}

clean.doFirst {
    delete "${rootDir}/dist/"
    delete "${rootDir}/env/"
    delete "${rootDir}/proactive.egg-info"
    delete "${rootDir}/__pycache__"
    delete "${rootDir}/proactive/java/lib/"
    delete "${rootDir}/docs/_build/"
}

licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

task setup(type: Copy) {
    from configurations.localDeps
    into "./proactive/java/lib"
}

task buildfinal(type:Exec) {
   if ( project.hasProperty("proactive_url") && project.hasProperty("username") && project.hasProperty("password") ) {
       commandLine "./build.sh", "${proactive_url}", "${username}", "${password}"   
   }else{
       commandLine "./build.sh", "", "", ""   
   }
}

task buildlocal(type:Exec) {
   commandLine "./buildlocal.sh"
}

task installlocal(type:Exec) {
   commandLine "./installlocal.sh"
}

task testlocal(type:Exec) {
   if ( project.hasProperty("proactive_url") && project.hasProperty("username") && project.hasProperty("password") ) {
       commandLine "./testlocal.sh", "${proactive_url}", "${username}", "${password}"
   }else{
       commandLine "./testlocal.sh", "", "", ""
   }
}

task publish(type:Exec) {
   ignoreExitValue true
   try {
       commandLine './publish.sh'
   } catch (all) {
       println 'the archive probably already exist so no need to publish twice'
   }
} 

task install(overwrite: true) {
}

setup.dependsOn clean
buildfinal.dependsOn setup
build.dependsOn buildfinal
publish.dependsOn build
install.dependsOn publish
